{
  "name": "Read Word Document Content",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "filePath": "/Users/alice_eric/Documents/AgentMarketplaceUI/ProjectTemplates/docs/Agent marketplace engineering weekly update.docx"
      },
      "id": "read-binary-file",
      "name": "Read Binary File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Rename .docx to .zip for decompression\nconst bin = items[0].binary.data;\n\n// Change file extension and MIME type\nbin.fileName = bin.fileName.replace(/\\.docx$/i, '.zip');\nbin.fileExtension = 'zip';\nbin.mimeType = 'application/zip';\n\nreturn items;"
      },
      "id": "rename-to-zip",
      "name": "Rename to ZIP",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "decompress",
        "binaryPropertyName": "data"
      },
      "id": "decompress",
      "name": "Decompress",
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Find and extract document.xml from the decompressed files\nconst result = [];\n\nfor (const file of Object.values(items[0].binary)) {\n  if (file.fileName === 'document.xml') {\n    result.push({ binary: { data: file } });\n    break;\n  }\n}\n\nreturn result;"
      },
      "id": "extract-document-xml",
      "name": "Extract document.xml",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "xml",
        "binaryPropertyName": "data"
      },
      "id": "extract-xml",
      "name": "Extract XML",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract clean text from Word document XML\nconst xml = items[0].json.data.toString('utf8');\n\n// Regex patterns to extract text from Word XML\nconst paraRegex = /<w:p[^>]*>([\\s\\S]*?)<\\/w:p>/g;\nconst wTRegex = /<w:t[^>]*>(.*?)<\\/w:t>/g;\n\nconst paragraphs = [];\nlet pMatch;\n\n// Extract paragraphs\nwhile ((pMatch = paraRegex.exec(xml)) !== null) {\n  const paragraphContent = pMatch[1];\n  let textContent = '';\n  let tMatch;\n  \n  // Extract text runs within paragraph\n  while ((tMatch = wTRegex.exec(paragraphContent)) !== null) {\n    textContent += tMatch[1];\n  }\n  \n  // Clean up text and add if not empty\n  const cleanText = textContent.trim();\n  if (cleanText) {\n    paragraphs.push(cleanText);\n  }\n}\n\n// Join all paragraphs with newlines\nconst fullText = paragraphs.join('\\n\\n');\n\nreturn [{\n  json: {\n    paragraphs: paragraphs,\n    text: fullText,\n    wordCount: fullText.split(/\\s+/).length,\n    paragraphCount: paragraphs.length\n  }\n}];"
      },
      "id": "extract-text",
      "name": "Extract Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "extracted_word_content.txt",
        "data": "={{ $json.text }}"
      },
      "id": "write-to-file",
      "name": "Write to File",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Read Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Binary File": {
      "main": [
        [
          {
            "node": "Rename to ZIP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rename to ZIP": {
      "main": [
        [
          {
            "node": "Decompress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decompress": {
      "main": [
        [
          {
            "node": "Extract document.xml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract document.xml": {
      "main": [
        [
          {
            "node": "Extract XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract XML": {
      "main": [
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Write to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-20T00:00:00.000Z",
  "versionId": "1"
}
