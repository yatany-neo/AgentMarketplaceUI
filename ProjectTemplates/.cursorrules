# Cursor Rules - 项目组织与开发规范

## 用户偏好设置
- 用户使用 Mac 系统，偏好中文交流
- 需要详细的解释和内容扩展，避免过于简短的总结
- 使用标准行业术语，不创造新术语
- 确保所有提供的信息真实准确，不编造信息
- 当 MCP 服务器调用失败时，明确告知用户并等待指示

## 项目结构规范

### 标准项目结构
```
ProjectName/
├── docs/                    # 文档文件夹
│   ├── README.md           # 项目说明文档
│   ├── *.md               # 其他文档文件
│   └── images/            # 图片资源
├── scripts/                # 代码文件夹（统一存放）
│   ├── README.md          # 脚本说明文档
│   ├── *.py               # Python 脚本
│   ├── *.js               # JavaScript 脚本
│   ├── *.json             # 配置文件
│   ├── requirements.txt   # Python 依赖
│   ├── package.json       # Node.js 依赖
│   └── venv/              # Python 虚拟环境
├── src/                    # 源代码文件夹（如适用）
├── tests/                  # 测试文件夹
├── config/                 # 配置文件
├── data/                   # 数据文件
├── .cursorrules           # Cursor 规则文件
├── .gitignore             # Git 忽略文件
└── README.md              # 项目根说明
```

## 代码组织原则

### 1. 代码文件管理
- **所有代码文件必须存放在 `scripts/` 文件夹中**
- 按功能对脚本进行分类和命名
- 保持脚本文件的功能单一性
- 为每个脚本添加详细的注释和文档字符串

### 2. 虚拟环境管理
- **Python 项目必须在 `scripts/venv/` 中创建虚拟环境**
- 使用 `requirements.txt` 管理 Python 依赖
- 虚拟环境名称统一为 `venv`
- 激活虚拟环境：`source scripts/venv/bin/activate`

### 3. 文档管理
- 所有文档存放在 `docs/` 文件夹
- 为每个项目创建详细的 README.md
- 为 scripts 文件夹创建专门的 README.md
- 保持文档与代码同步更新

## 开发工作流程

### 1. 新项目初始化
```bash
# 1. 创建项目结构
mkdir ProjectName
cd ProjectName
mkdir -p docs scripts src tests config data

# 2. 复制模板文件
cp ~/ProjectTemplates/.cursorrules .
cp ~/ProjectTemplates/.gitignore .
cp ~/ProjectTemplates/scripts/README.md scripts/

# 3. 创建虚拟环境（Python 项目）
cd scripts
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### 2. 代码开发规范
- 使用有意义的变量和函数名
- 添加类型提示（Python）
- 编写单元测试
- 保持代码简洁和可读性

### 3. 文件命名规范
- 使用小写字母和下划线：`my_script.py`
- 避免空格和特殊字符
- 使用描述性的文件名
- 版本号使用下划线：`script_v2.py`

## 依赖管理

### Python 项目
- 使用 `requirements.txt` 管理依赖
- 定期更新依赖版本
- 使用虚拟环境隔离依赖

### Node.js 项目
- 使用 `package.json` 管理依赖
- 使用 `package-lock.json` 锁定版本
- 区分开发依赖和生产依赖

## 工具和服务器配置

### MCP 服务器使用
- 优先使用 Exa MCP 服务器进行在线搜索
- 使用 Sequential Thinking MCP 服务器进行复杂问题分析
- 当 MCP 服务器调用失败时，明确告知用户

### 终端使用规范
- 避免启动新的终端窗口
- 在现有终端中执行命令
- 使用后台进程处理长时间运行的任务

## 错误处理和调试

### 1. 错误报告
- 当工具调用失败时，立即告知用户
- 提供详细的错误信息和可能的解决方案
- 等待用户指示后再继续操作

### 2. 调试流程
- 使用日志记录重要操作
- 提供调试信息和状态更新
- 保持操作的透明性

## 代码质量保证

### 1. 代码审查
- 检查代码的语法错误
- 确保代码符合项目规范
- 验证功能的正确性

### 2. 测试要求
- 为关键功能编写测试
- 使用自动化测试工具
- 保持测试覆盖率

## 项目维护

### 1. 定期维护
- 更新依赖包版本
- 清理不再使用的代码
- 更新文档内容

### 2. 版本控制
- 使用 Git 进行版本控制
- 编写清晰的提交信息
- 使用分支管理功能开发

## 特殊项目类型

### 数据分析项目
- 数据文件存放在 `data/` 文件夹
- 分析脚本存放在 `scripts/analysis/`
- 结果图表存放在 `docs/images/`

### Web 开发项目
- 前端代码存放在 `src/frontend/`
- 后端代码存放在 `src/backend/`
- 配置文件存放在 `config/`

### 机器学习项目
- 模型文件存放在 `models/`
- 训练脚本存放在 `scripts/training/`
- 数据预处理脚本存放在 `scripts/preprocessing/`

## 注意事项

1. **始终遵循项目结构规范**
2. **保持代码和文档的同步更新**
3. **使用虚拟环境隔离依赖**
4. **提供详细的错误信息和解决方案**
5. **保持操作的透明性和可追踪性**
6. **优先使用中文进行交流**
7. **提供详细和扩展性的解释**
